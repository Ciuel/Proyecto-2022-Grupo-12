from datetime import datetime
import enum
from sqlalchemy import Column, String, Integer, Sequence , Enum
from src.core.db import db


class GenderOptions(enum.Enum):
    male = 1
    female = 2
    other = 3
    
class DNIOptions(enum.Enum):
    DNI = 1
    LE = 2
    LC = 3

class Associate(db.Model):
    """ Club associate model
    Args:
        - DNI type (select) : list with all different DNI types ex: DNI, LE, LC
        - DNI number (integer) :  Associate DNI number
        - gender (select) : Associate gender ex: M|F|Otro
        - associate number (integer): Associate number. Unique, autogenerated
        - address (text) : associate address .
        - phone number (optional) (text): Associate Phone number.
        - Entry date  (datetime): Entry-date autogenerated
    """    
    __tablename__ = "associates"
    associate_number = Column(Integer, primary_key=True)
    #Falta relacion con usuario
    DNI_number = Column(Integer,unique=True)
    DNI_type = Column(Enum(DNIOptions,validate_string=True))
    gender = Column(Enum(GenderOptions,validate_string=True))
    address = Column(String(255))
    phone_number= Column(Integer,nullable=True)
    entry_date=Column(db.DateTime)

    def __init__(self, DNI_number, DNI_type, gender, address, phone_number):
        self.DNI_number = DNI_number
        self.DNI_type = DNI_type
        self.gender = gender
        self.address = address
        self.phone_number = phone_number
        self.entry_date=datetime.utcnow

    def __repr__(self):
        #Falta nombre y apellido que los robo de user
        return f"""con el dni {self.DNI_number} con el correo {self.email}, del genero {self.gender}"""
        